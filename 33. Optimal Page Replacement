#include <stdio.h>

int predict(int pages[], int n, int index, int frames[], int capacity) {
    int res = -1, farthest = index;
    for (int i = 0; i < capacity; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (j == n)
            return i;
    }
    return (res == -1) ? 0 : res;
}

void optimal(int pages[], int n, int capacity) {
    int frames[capacity], count = 0, faults = 0;
    for (int i = 0; i < capacity; i++)
        frames[i] = -1;

    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < capacity; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            if (count < capacity)
                frames[count++] = pages[i];
            else {
                int pos = predict(pages, n, i + 1, frames, capacity);
                frames[pos] = pages[i];
            }
            faults++;
        }

        printf("Frames: ");
        for (int j = 0; j < capacity; j++)
            printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2};
    int n = sizeof(pages) / sizeof(pages[0]);
    optimal(pages, n, 3);
    return 0;
}
